var t,e,n,r,s,i=this&&this.__classPrivateFieldSet||function(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n},a=this&&this.__classPrivateFieldGet||function(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)};import o from"../../mime-parser/dist/MIMEParser.js";export default class{constructor(a=["text/html","application/xhtml+xml"],o=0){if(t.set(this,void 0),e.set(this,void 0),n.set(this,new Set),r.set(this,null),s.set(this,null),i(this,t,a),!Number.isInteger(o))throw new TypeError("Argument `maxFetchCount` must be an integer.");if(o<0)throw new RangeError("Argument `maxFetchCount` must be greater than or equal to 0.");i(this,e,o)}async fetch(h=location.toString()){let l=new URL(h);for(;"/"!==l.pathname&&(0===a(this,e)||a(this,e)>a(this,n).size);){l=this._getParentPage(l);const e=await fetch(`${l.origin}${l.pathname}`);if(a(this,n).add(e),console.info(`【Fetch API】${e.url} [${e.status} ${e.statusText}]`),!e.ok)continue;const h=e.headers.get("content-type");if(null===h)throw new Error(`Missing "Content-Type" in response header for URL <${e.url}>`);const c=new o(h).getEssence();if(!a(this,t).includes(c))continue;i(this,r,e.url);const u=(new DOMParser).parseFromString(await e.text(),c),p=u.querySelector('meta[property="og:title"]')?.content;if(void 0!==p)i(this,s,p);else{const t=u.querySelector("title")?.textContent;null!=t&&i(this,s,t)}break}}getFetchedResponses(){return a(this,n)}getUrl(){return a(this,r)}getTitle(){return a(this,s)}_getParentPage(t){return new URL(t.pathname.endsWith("/")?"../":"./",t)}}t=new WeakMap,e=new WeakMap,n=new WeakMap,r=new WeakMap,s=new WeakMap;
//# sourceMappingURL=ClosestHTMLPage.min.js.map